#exportPattern("^[[:alpha:]]+")

# Declare compiled functions
useDynLib(NMF
			, divergence_update_H, divergence_update_W # divergence based updates
			, euclidean_update_H, euclidean_update_W # euclidean based updates
			, offset_euclidean_update_H, offset_euclidean_update_W # nmf with offset (euclidean based)
			, Euclidean_rss # compute residual sum of squares (without memory duplication)
			, KL_divergence # compute the KL divergence (with no memory duplication)
			, clone_object
			)

import(methods)
importFrom(graphics, plot)
importFrom(stats, coefficients, coef, fitted, offset, predict, residuals, deviance)

export(
	aheatmap
	, has.track
	, isNMFfit
	, is.nmf
	, newNMF
	, nmf.getOption
	, nmfAlgorithm
	, nmfEstimateRank
	, nmfModels
	, nmfRegisterAlgorithm
	, nmfSeed
	, nmf.options
	, nmf.options.reset
	, nmf.options.runtime
	, plot.NMF.rank
	, plot.NMF.consensus
	, profplot
	, randomize
	, rng.equal
	, rng1.equal
	, RNGdigest
	, RNGinfo
	, RNGlib
	, RNGlibs
	, RNGprovider
	, RNGrecovery
	, RNGseq
	, RNGseed
	, staticVar
	, syntheticNMF
)
exportMethods(
	"[",
	"$",
	"$<-",
    "algorithm",
    "algorithm<-",
#    "annotate",
	"as.NMFList",
    "basis",
    "basis<-",
    "basiscor",
    "basismap",
    "basisnames",
    "basisnames<-",
#    "clusters",
    "coef",
    "coef<-",
    "coefficients",
    "coefmap",
    "compare",
#    "computeContrib",
    "connectivity",
    "consensus",
    "consensusmap",
#    "contribs",
	"cophcor",
	"deviance",
    "dim",
    "dimnames",
    "dimnames<-",
    "dispersion",
    "distance",
    "entropy",
    "errorPlot",
    'evar',
    "extractFeatures",
    "fcnnls",
    "featureScore",
    "fit",
    "fit<-",    
    "fitted",
    "getRNG",
    "getRNG1", 
#    "hist",
    "initialize",
    "is.empty.nmf",
    "metaHeatmap",
    "minfit",
   "modelname",
#    "modelname<-",
#    "name",
#    "name<-",
    "nbasis",
    "niter",
    "niter<-",
    "nmf",
    "nmfApply",
    "nmf.equal",
    "nmfModel",
#    "nmfRegister",
#    "nmfRegisterAlgorithm",
#    "nmfRegisterSeed",
	"nrun",
    "objective",
    "objective<-",
    "offset",
    "plot",
    "predict",
    "profcor",    
    "purity",
    "rnmf",
#    "report",
	"rmatrix", 
	"rss",
    "residuals",
    "residuals<-",
#    "run.options",
#    "run.options<-",
#    "run",
    "runtime",
    "runtime.all",
    "scoef",
#    "seed",
    "seeding",
    "seeding<-",
    "seqtime",
    "setRNG",
    "show",
    "smoothing",
    "sparseness" 
    , "summary"
)
exportClasses(
    "NMF",
    "NMFstd",
     "NMFns",
     "NMFOffset",
     "NMFSet"
     , "NMFfitX"
     , "NMFfitX1"
     , "NMFfitXn"
#     , "NMFStrategy",
#     "NMFStrategyFunction",
#     "NMFStrategyIterative",
#     "NMFStrategyIterativeX" 
)
